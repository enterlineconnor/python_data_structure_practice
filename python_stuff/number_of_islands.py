from re import L
from regex import P


grid = [["1"," "," ","1","1","1"," ","1","1"," "," "," "," "," "," "," "," "," "," "," "],["1"," "," ","1","1"," "," ","1"," "," "," ","1"," ","1"," ","1"," "," ","1"," "],[" "," "," ","1","1","1","1"," ","1"," ","1","1"," "," "," "," ","1"," ","1"," "],[" "," "," ","1","1"," "," ","1"," "," "," ","1","1","1"," "," ","1"," "," ","1"],[" "," "," "," "," "," "," ","1","1","1"," "," "," "," "," "," "," "," "," "," "],["1"," "," "," "," ","1"," ","1"," ","1","1"," "," "," "," "," "," ","1"," ","1"],[" "," "," ","1"," "," "," ","1"," ","1"," ","1"," ","1"," ","1"," ","1"," ","1"],[" "," "," ","1"," ","1"," "," ","1","1"," ","1"," ","1","1"," ","1","1","1"," "],[" "," "," "," ","1"," "," ","1","1"," "," "," "," ","1"," "," "," ","1"," ","1"],[" "," ","1"," "," ","1"," "," "," "," "," ","1"," "," ","1"," "," "," ","1"," "],["1"," "," ","1"," "," "," "," "," "," "," ","1"," "," ","1"," ","1"," ","1"," "],[" ","1"," "," "," ","1"," ","1"," ","1","1"," ","1","1","1"," ","1","1"," "," "],["1","1"," ","1"," "," "," "," ","1"," "," "," "," "," "," ","1"," "," "," ","1"],[" ","1"," "," ","1","1","1"," "," "," ","1","1","1","1","1"," ","1"," "," "," "],[" "," ","1","1","1"," "," "," ","1","1"," "," "," ","1"," ","1"," "," "," "," "],["1"," "," ","1"," ","1"," "," "," "," ","1"," "," "," ","1"," ","1"," ","1","1"],["1"," ","1"," "," "," "," "," "," ","1"," "," "," ","1"," ","1"," "," "," "," "],[" ","1","1"," "," "," ","1","1","1"," ","1"," ","1"," ","1","1","1","1"," "," "],[" ","1"," "," "," "," ","1","1"," "," ","1"," ","1"," "," ","1"," "," ","1","1"],[" "," "," "," "," "," ","1","1","1","1"," ","1"," "," "," ","1","1"," "," "," "]]

for row in range(len(grid)):
    print('Row {}: {}'.format(row,grid[row]))

def dfs_explore(row,col,grid,visited):
    if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[row]):
        return
    
    current_location = str(row)+'-'+str(col)
    if grid[row][col] == "1" and visited.get(current_location) is None:
        visited[current_location] = True
        dfs_explore(row-1,col,grid,visited)
        dfs_explore(row+1,col,grid,visited)
        dfs_explore(row,col-1,grid,visited)
        dfs_explore(row,col+1,grid,visited)
    
    return visited




visited = {}
num_of_islands = 0
for row in range(len(grid)):
    for col in range(len(grid[row])):
        current = grid[row][col]
        current_location = str(row)+'-'+str(col)
        if current == "1" and visited.get(current_location) is None:
            num_of_islands += 1
            visited = dfs_explore(row,col,grid,visited)

print(num_of_islands)
